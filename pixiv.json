[
    {
        "bookSourceComment": "Pixiv 书源（系列小说）（更新时间：2024-12-06）\n\n可用功能：✅搜索✅发现✅添加链接✅订阅源\n搜索小说：✅小说名称✅作者名称✅小说标签\n发现小说：✅关注作者✅追更列表✅推荐✅收藏\n添加网址：✅Pixiv小说链接✅Pixiv系列小说链接\n订阅用法：点击订阅源打开小说/系列小说，【刷新】，点击【加入书架】按钮，添加小说到书架\n\n书源发布：兽人阅读频道 https://t.me/FurryReading\n项目地址：https://github.com/windyhusky/PixivSource\n\n规则订阅：\n1️⃣ Pixiv 书源：\nhttps://cdn.jsdelivr.net/gh/windyhusky/PixivSource@main/pixiv.json\nhttps://raw.githubusercontent.com/windyhusky/PixivSource/main/pixiv.json\n\n2️⃣ Pixiv 订阅源：\nhttps://cdn.jsdelivr.net/gh/windyhusky/PixivSource@main/btsrk.json\nhttps://raw.githubusercontent.com/windyhusky/PixivSource/main/btsrk.json",
        "bookSourceGroup": "🔞 Pixiv",
        "bookSourceName": "Pixiv",
        "bookSourceType": 0,
        "bookSourceUrl": "https://www.pixiv.net/novel",
        "bookUrlPattern": "(https?://)?(www\\.)?pixiv\\.net(/ajax)?/novel/(show\\.php\\?id=|series/)?\\d+",
        "customOrder": 1,
        "enabled": true,
        "enabledCookieJar": true,
        "enabledExplore": true,
        "exploreUrl": "[\n  {\n    \"title\": \"关注作者\",\n    \"url\": \"https://www.pixiv.net/ajax/follow_latest/novel?p={{page}}&mode=all&lang=zh\",\n    \"style\": {\n      \"layout_flexGrow\": 1,\n      \"layout_flexBasisPercent\":0.3\n    }\n  },\n    {\n    \"title\": \"追更列表\",\n    \"url\": \"https://www.pixiv.net/ajax/watch_list/novel?p={{page}}&new=1&lang=zh\",\n    \"style\": {\n      \"layout_flexGrow\": 1,\n      \"layout_flexBasisPercent\":0.3\n    }\n  },\n  {\n    \"title\": \"推荐小说\",\n    \"url\": \"https://www.pixiv.net/ajax/top/novel?mode=all&lang=zh\",\n    \"style\": {\n      \"layout_flexGrow\": 1,\n      \"layout_flexBasisPercent\":0.3\n    }\n  },\n  {\n    \"title\": \"收藏小说\",\n    \"url\": \"https://www.pixiv.net/ajax/user/{{cache.get(\\\"pixiv:uid\\\")}}/novels/bookmarks?tag=&offset={{(page-1)*24}}&limit=24&rest=show&lang=zh\",\n    \"style\": {\n      \"layout_flexGrow\": 1,\n      \"layout_flexBasisPercent\":0.3\n    }\n  }\n]",
        "header": "{\"referer\":\"https://www.pixiv.net\"}",
        "lastUpdateTime": 1733446163123,
        "loginCheckJs": "var util = {}\n\nfunction objStringify(obj) {\n    return JSON.stringify(obj, (n, v) => {\n        if (typeof v == \"function\")\n            return v.toString();\n        return v;\n    });\n}\n\nfunction publicFunc() {\n    let u = {}\n    u.SHOW_ORIGINAL_NOVEL_LINK = true   // 目录处显示 Pixiv 小说链接，但会增加请求次数\n    // u.SHOW_ORIGINAL_NOVEL_LINK = false  // 目录不显示 Pixiv 小说链接，可以减少请求次数\n    u.REPLACE_WITH_BOOK_TITLE_MARKS = true  // 注音内容为汉字时，替换为书名号 `[[rb:汉字 > 注音]] => 汉字《注音》`\n    // u.REPLACE_WITH_BOOK_TITLE_MARKS = false // 注音内容默认替换为括号`[[rb:汉字 > 注音]] => 汉字（注音）`\n    u.DEBUG = false  // 调试模式\n\n    u.cacheGetAndSet = (key, supplyFunc) => {\n        let v = cache.get(key)\n        if (v === undefined || v === null) {\n            v = JSON.stringify(supplyFunc())\n            // 缓存10分钟\n            cache.put(key, v, 600)\n        }\n        return JSON.parse(v)\n    }\n    u.getAjaxJson = (url) => {\n        return util.cacheGetAndSet(url, () => {\n            return JSON.parse(java.ajax(url))\n        })\n    }\n    u.getWebviewJson = (url, parseFunc) => {\n        return util.cacheGetAndSet(url, () => {\n            let html = java.webView(null, url, null)\n            return JSON.parse(parseFunc(html))\n        })\n    }\n    u.debugFunc = (func) => {\n        if (String(source.getVariable()) === \"debug\" || util.DEBUG === true) {\n            func()\n        }\n    }\n\n    u.urlNovelUrl = (novelId) =>{\n        return `https://www.pixiv.net/novel/show.php?id=${novelId}`\n    }\n    u.urlNovelDetailed = (novelId) => {\n        return `https://www.pixiv.net/ajax/novel/${novelId}`\n    }\n    u.urlNovel = (novelId) => {\n        if (util.SHOW_ORIGINAL_NOVEL_LINK === true) {\n            return util.urlNovelUrl(novelId)\n        } else {\n            return util.urlNovelDetailed(novelId)\n        }\n    }\n\n    u.urlSeriesUrl = (seriesId) => {\n        return `https://www.pixiv.net/novel/series/${seriesId}`\n    }\n    u.urlSeriesDetailed = (seriesId) => {\n        return `https://www.pixiv.net/ajax/novel/series/${seriesId}?lang=zh`\n    }\n    u.urlSeriesNovels = (seriesId, limit, offset) => {\n        if (limit > 30) {\n            limit = 30\n        }\n        if (limit < 10) {\n            limit = 10\n        }\n        return `https://www.pixiv.net/ajax/novel/series_content/${seriesId}?limit=${limit}&last_order=${offset}&order_by=asc&lang=zh`\n    }\n\n    u.urlUserUrl = function (id) {\n        return `https://www.pixiv.net/users/${id}`\n    }\n    u.urlUserAllWorks = (uesrId) => {\n        return `https://www.pixiv.net/ajax/user/${uesrId}/profile/all?lang=zh`\n    }\n    u.urlUserNovels = (nid, nidList) => {\n        return `https://www.pixiv.net/ajax/user/${nid}/novels?${nidList.map(v => \"ids[]=\" + v).join(\"&\")}`\n    }\n\n    u.urlSearchNovel = (novelName, page) =>{\n        return `https://www.pixiv.net/ajax/search/novels/${encodeURI(novelName)}?word=${encodeURI(novelName)}&order=date_d&mode=all&p=${page}&s_mode=s_tag&lang=zh`\n    }\n    u.urlSearchSeries = (seriesName, page) => {\n        return`https://www.pixiv.net/ajax/search/novels/${encodeURI(seriesName)}?word=${encodeURI(seriesName)}&order=date_d&mode=all&p=${page}&s_mode=s_tag&gs=1&lang=zh`\n    }\n    // 完全匹配用户名\n    u.urlSearchUser = (username) => {\n        return `https://www.pixiv.net/search/users?nick=${encodeURI(username)}&s_mode=s_usr&nick_mf=1`\n    }\n    u.urlSearchUserPartial = (username) => {\n        return `https://www.pixiv.net/search/users?nick=${encodeURI(username)}&s_mode=s_usr`\n    }\n\n    u.urlCoverUrl = (url) => {\n        return `${url},{\"headers\": {\"Referer\":\"https://www.pixiv.net/\"}}`\n    }\n    u.urlIllustUrl = (illustId) => {\n        return `https://www.pixiv.net/artworks/${illustId}`\n    }\n    u.urlIllustDetailed = (illustId) => {\n        return `https://www.pixiv.net/ajax/illust/${illustId}?lang=zh`\n    }\n    u.urlIllustOriginal = function (illustId, order) {\n        let illustOriginal = util.getAjaxJson(util.urlIllustDetailed(illustId)).body.urls.original\n        if (order >= 1) {\n            illustOriginal = illustOriginal.replace(`_p0`, `_p${order - 1}`)\n        }\n        return illustOriginal\n    }\n\n    u.urlSeriesIllustsUrl = (uesrId, seriesId) => {\n        return `https://www.pixiv.net/user/${uesrId}/series/${seriesId}`\n    }\n    u.urlSeriesIllustsDetailed = (seriesId) => {\n        return `https://www.pixiv.net/ajax/series/${seriesId}?p=1&lang=zh`\n    }\n\n    u.formatNovels = function (novels) {\n        novels.forEach(novel => {\n            // novel.title = novel.title\n            // novel.userName = novel.userName\n            novel.tags = novel.tags.join(\",\")\n\n            if (novel.isOneshot === undefined) {  //单篇小说\n                // novel.textCount = novel.textCount\n                // novel.createDate = novel.createDate\n                // novel.updateDate = novel.updateDate\n                // novel.description = novel.description\n                novel.lastChapter = novel.title\n                novel.coverUrl = novel.url\n                novel.aiType = novel.aiType - 1\n\n            } else {  // 兼容系列搜索\n                if (novel.isOneshot === true) {\n                    novel.id = novel.novelId  //单篇（完结？）小说\n                    novel.lastChapter = novel.title\n                    novel.aiType = novel.aiType / 2\n\n                } else {  // 真正的系列小说\n                    novel.id = novel.latestEpisodeId  // 最近一篇\n                    novel.latestPublishDate = novel.latestPublishDateTime\n                    novel.seriesId = novel.id        // 真正的系列小说id\n                    // let series = this.getAjaxJson(util.urlSeriesDetailed(novel.seriesId)).body\n                    // novel.id = series.firstNovelId\n                    // novel.aiType = novel.aiType\n                }\n                novel.textCount = novel.textLength\n                novel.createDate = novel.createDateTime\n                novel.updateDate = novel.updateDateTime\n                novel.description = novel.caption\n                novel.coverUrl = novel.cover.urls[\"480mw\"] // 240mw, 480mw, 1200x1200, 128x128, original\n            }\n\n            novel.coverUrl = this.urlCoverUrl(novel.coverUrl)\n            novel.detailedUrl = this.urlNovelDetailed(novel.id)\n            novel.readingTime = `${novel.readingTime / 60} 分钟`\n            const time1 = this.dateFormat(novel.createDate);\n            const time2 = this.dateFormat(novel.updateDate);\n            novel.description = `${novel.description}\\n上传时间：${time1}\\n更新时间：${time2}`\n            //novel.description= `书名：${novel.title}\\n作者：${novel.userName}\\n标签：${novel.tags}\\n上传：${time1}\\n更新：${time2}\\n简介：${novel.description}`\n        })\n        return novels\n    }\n\n    // 将多个长篇小说解析为一本书\n    u.combineNovels = function (novels) {\n        return novels.filter(novel => {\n            // 单本直接解析为一本书\n            if (novel.seriesId === undefined || novel.seriesId === null) {\n                return true\n            }\n            // 集合中没有该系列解析为一本书\n            if (!seriesSet.has(novel.seriesId)) {\n                seriesSet.add(novel.seriesId)\n                return true\n            }\n            return false\n        })\n    }\n\n    u.dateFormat = function (str) {\n        let addZero = function (num) {\n            return num < 10 ? '0' + num : num;\n        }\n        let time = new Date(str);\n        let Y = time.getFullYear() + \"年\";\n        let M = addZero(time.getMonth() + 1) + \"月\";\n        let D = addZero(time.getDate()) + \"日\";\n        return Y + M + D;\n    }\n    u.timeStampFormat = function (int) {\n        let addZero = function (num) {\n            return num < 10 ? '0' + num : num;\n        }\n        let time = new Date(int * 1000);\n        let Y = time.getFullYear()\n        let M = addZero(time.getMonth() + 1)\n        let D = addZero(time.getDate())\n        let h = addZero(time.getHours())\n        let m = addZero(time.getMinutes())\n        let s = addZero(time.getSeconds())\n        return `${Y}-${M}-${D} ${h}:${m}:${s}`\n    }\n    u.timeTextFormat = function (text) {\n        return `${text.slice(0, 10)} ${text.slice(11, 19)}`\n    }\n\n    util = u\n    java.put(\"util\", objStringify(u))\n}\n\npublicFunc()\n\n// 获取请求的user id方便其他ajax请求构造\nlet uid = java.getResponse().headers().get(\"x-userid\")\nif (uid != null) {\n    cache.put(\"pixiv:uid\", uid)\n}\njava.getStrResponse(null, null)",
        "loginUrl": "https://accounts.pixiv.net/login",
        "respondTime": 180000,
        "ruleBookInfo": {
            "author": "userName",
            "coverUrl": "coverUrl",
            "init": "@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\n(function (res) {\n    // 获取网址id，请求并解析数据\n    var novelId = 0\n    let isHtml = result.startsWith(\"<!DOCTYPE html>\")\n    if (isHtml) {\n        let isSeries = baseUrl.match(new RegExp(\"pixiv(\\\\.net|)/(ajax/)?(novel/)?series/\\\\d+\"))\n        if (isSeries) {\n            let seriesId = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n            java.log(`系列ID：${seriesId}`)\n            novelId = util.getAjaxJson(util.urlSeriesDetailed(seriesId)).body.firstNovelId\n            java.log(`首篇小说ID：${novelId}`)\n            res = util.getAjaxJson(util.urlNovelDetailed(novelId)).body\n        } else {\n            let isNovel = baseUrl.match(new RegExp(\"pn|pixiv(\\\\.net)?/(ajax/)?novel\"))\n            if (isNovel) {\n                novelId = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n                java.log(`详情：匹配小说ID：${novelId}`)\n                res = util.getAjaxJson(util.urlNovelDetailed(novelId)).body\n            } else {\n                return []\n            }\n        }\n    } else {\n        // 从搜索直接获取 json\n        res = JSON.parse(result).body\n        if (res.total === 0) {\n            return []\n        }\n    }\n\n\n    try {\n        let info = {}\n        info.noveId = res.id\n        info.title = res.title\n        info.userName = res.userName\n        // info.tags = res.tags 　// complex array 不好取数据\n        // info.textCount = res.textCount  // 无数据\n        info.tags = res.userNovels[`${info.noveId}`].tags\n        // info.textCount = res.userNovels[`${info.noveId}`].textCount\n        // info.readingTime = `${res.userNovels[`${info.noveId}`].readingTime / 60} 分钟`\n        info.latestChapter = \"\"\n        info.description = res.description\n        info.coverUrl = res.coverUrl\n        info.catalogUrl = util.urlNovelDetailed(info.noveId)\n\n        if (res.seriesNavData === undefined || res.seriesNavData === null) {\n            info.title = info.latestChapter = res.title\n            info.userName = res.userName\n            // info.tags = res.userNovels[`${info.noveId}`].tags\n            info.tags.unshift('单本')\n            info.textCount = res.userNovels[`${info.noveId}`].textCount\n            info.latestChapter = res.title\n            info.description = res.description\n            info.coverUrl = res.coverUrl\n            info.createDate = res.createDate\n            info.updateDate = res.uploadDate\n\n        } else {  // 系列小说\n            info.seriesId = res.seriesNavData.seriesId\n            info.title = res.seriesNavData.title\n            java.log(`系列小说：${info.seriesId}，${info.title}`)\n            res2 = JSON.parse(java.ajax(util.urlSeriesDetailed(res.seriesNavData.seriesId))).body\n            // java.log(JSON.stringify(res2))\n            // info.title = res2.title\n            // info.userName = res2.userName\n            info.tags.push.apply(res2.tags)   //合并当前章节 tags\n            info.tags.unshift('长篇')\n            info.textCount = res2.publishedTotalCharacterCount\n            info.readingTime = `${res2.publishedReadingTime / 60} 分钟`\n            info.latestChapter = \"\"\n            info.description = `${res2.caption}\\n当前章节简介：\\n${info.description}`\n            // info.coverUrl = res2.firstEpisode.url   // 第一章封面\n            info.coverUrl = res2.cover.urls[\"480mw\"] // 240mw, 480mw, 1200x1200, 128x128, original\n            info.createDate = res2.createDate\n            info.updateDate = res2.updateDate\n            info.totalChapterNum = res2.displaySeriesContentCount  //章节总数\n            // info.language = res2.language\n            // info.total = res2.total\n            // info.firstNovelId = res2.firstNovelId\n            // info.latestNovelId = res2.latestNovelId\n        }\n        info.tags = info.tags.join(\",\")\n        const time = util.dateFormat(info.updateDate)\n        info.description  = `${info.description}\\n更新时间:${time}`\n        //info.description = `\\n书名：${info.title}\\n作者：${info.userName}\\n标签：${info.tags}\\n更新：${time}\\n简介：${info.description}`\n        return info\n\n    } catch (e) {\n        java.log(`受 Pixiv 的限制，无法获取小说ID： ${novelId} 的数据`)\n        java.longToast(`受 Pixiv 的限制，无法获取小说ID： ${novelId} 的数据`)\n    }\n})();",
            "intro": "description",
            "kind": "tags",
            "lastChapter": "latestChapter",
            "name": "title",
            "tocUrl": "catalogUrl",
            "wordCount": "textCount"
        },
        "ruleContent": {
            "content": "@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\n(() => {\n    // 获取网址id，请求并解析数据，调试用\n    var novelId = 0, res = \"\"\n    let isHtml = result.startsWith(\"<!DOCTYPE html>\")\n    if (isHtml) {\n        let isSeries = baseUrl.match(new RegExp(\"pixiv.net/(ajax/|)novel/series\"))\n        if (isSeries) {\n            let seriesId = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n            java.log(`系列ID：${seriesId}`)\n            novelId = util.getAjaxJson(util.urlSeriesDetailed(seriesId)).body.firstNovelId\n            java.log(`首篇小说ID：${novelId}`)\n            res = util.getAjaxJson(util.urlNovelDetailed(novelId)).body\n        } else {\n            let isNovel = baseUrl.match(new RegExp(\"pixiv.net/(ajax/|)novel\"))\n            if (isNovel) {\n                novelId = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n                java.log(`正文：匹配小说ID：${novelId}`)\n                res = util.getAjaxJson(util.urlNovelDetailed(novelId)).body\n            } else {\n                return []\n            }\n        }\n    } else {\n        res = JSON.parse(result).body\n        if (res.total === 0) {\n            return []\n        }\n    }\n\n    let content = res.content\n    // 在正文内部添加小说描述\n    if (res.seriesNavData !== undefined && res.seriesNavData !== null && res.description !== \"\") {\n        content = res.description + \"\\n\" + \"——————————\\n\".repeat(2) + content\n    }\n\n    // 获取 [uploadedimage:] 的图片链接\n    let hasEmbeddedImages = res.textEmbeddedImages !== undefined && res.textEmbeddedImages !== null\n    if (hasEmbeddedImages) {\n        Object.keys(res.textEmbeddedImages).forEach((key) => {\n            content = content.replace(`[uploadedimage:${key}]`, `<img src=\"${res.textEmbeddedImages[key].urls.original}\">`)\n        })\n    }\n\n    // 获取 [pixivimage:] 的图片链接 [pixivimage:1234] [pixivimage:1234-1]\n    let matched = content.match(RegExp(/\\[pixivimage:(\\d+)-?(\\d+)]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let illustId, order\n            let matched2 = matched[i].match(RegExp(\"(\\\\d+)-?(\\\\d+)\"))\n            let temp = matched2[0].split(\"-\")\n            illustId = temp[0]\n            if (temp.length >= 2) {\n                order = temp[1]\n            }\n            content = content.replace(`${matched[i]}`, `<img src=\"${util.urlIllustOriginal(illustId, order)}\">`)\n        }\n    }\n\n    // 替换 Pixiv 分页标记符号 [newpage]\n    matched = content.match(RegExp(/[ 　]*\\[newpage][ 　]*/gm))\n    if (matched) {\n        for (let i in matched){\n            java.log(matched[i])\n            content = content.replace(`${matched[i]}`, `${\"<p>​<p/>\".repeat(3)}`)\n        }\n    }\n\n    // 替换 Pixiv 章节标记符号 [chapter:]\n    matched = content.match(RegExp(/\\[chapter:(.*?)]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let matched2 = matched[i].match(/\\[chapter:(.*?)]/m)\n            let chapter = matched2[1].trim()\n            content = content.replace(`${matched[i]}`, `${chapter}<p>​<p/>`)\n        }\n    }\n\n    // 替换 Pixiv 跳转页面标记符号 [[jump:]]\n    matched = content.match(RegExp(/\\[jump:(\\d+)]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let page = matched[i].match(/\\d+/)\n            content = content.replace(`${matched[i]}`, `\\n\\n跳转至第${page}节`)\n        }\n    }\n\n    // 替换 Pixiv 链接标记符号 [[jumpuri: > ]]\n    matched = content.match(RegExp(/\\[\\[jumpuri:(.*?)>(.*?)]]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let matched2 = matched[i].match(/\\[\\[jumpuri:(.*?)>(.*?)]]/m)\n            let matchedText = matched2[0]\n            let urlName = matched2[1].trim()\n            let urlLink = matched2[2].trim()\n            // 阅读不支持超链接\n            //content = content.replace(`${matchedText}`, `<a href=${urlLink}>${urlName}</a>`)\n            if (urlLink === urlName) {\n                content = content.replace(`${matchedText}`, `${urlName}`)\n            } else {\n                content = content.replace(`${matchedText}`, `${urlName}: ${urlLink}`)\n            }\n        }\n    }\n\n    // 替换 Pixiv 注音标记符号 [[rb: > ]]\n    matched = content.match(RegExp(/\\[\\[rb:(.*?)>(.*?)]]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let matched2 = matched[i].match(/\\[\\[rb:(.*?)>(.*?)]]/m)\n            let matchedText = matched2[0]\n            let kanji = matched2[1].trim()\n            let kana = matched2[2].trim()\n\n            if (util.REPLACE_WITH_BOOK_TITLE_MARKS === true) {\n                // 默认替换成（括号）\n                content = content.replace(`${matchedText}`, `${kanji}（${kana}）`)\n            } else {\n                var reg = new RegExp(\"[\\\\u4E00-\\\\u9FFF]+\",\"g\");\n                if (reg.test(kana)) {\n                    // kana为中文，则替换回《书名号》\n                    content = content.replace(`${matchedText}`, `${kanji}《${kana}》`)\n                } else{\n                    // 阅读不支持 <ruby> <rt> 注音\n                    // content = content.replace(`${matchedText}`, `<ruby>${kanji}<rt>${kana}</rt></ruby>`)\n                    content = content.replace(`${matchedText}`, `${kanji}（${kana}）`)\n                }\n            }\n        }\n    }\n\n    return content\n})()\n",
            "imageStyle": "DEFAULT"
        },
        "ruleExplore": {
            "author": "userName",
            "bookList": "@js:\nvar util = objParse(String(java.get(\"util\")))\nvar seriesSet = new Set();  // 存储seriesID 有BUG无法处理翻页\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction handNovels(novels) {\n    novels.forEach(novel => {\n        if (novel.tags === undefined || novel.tags === null) {\n            novel.tags = []\n        }\n\n        if (novel.seriesId === undefined || novel.seriesId === null) {\n            novel.tags.unshift(\"单本\")\n        } else {\n            let userAllWorks = util.getAjaxJson(util.urlUserAllWorks(novel.userId)).body\n            for (let series of userAllWorks.novelSeries) {\n                if (series.id === novel.seriesId) {\n                    // let series = util.getAjaxJson(util.urlSeriesDetailed(novel.seriesId)).body\n                    novel.textCount = series.publishedTotalCharacterCount\n                    novel.url = series.cover.urls[\"480mw\"]\n                    novel.title = series.title\n                    novel.tags = series.tags\n                    novel.description = series.caption\n\n                    try{\n                        // 发送请求获取第一章 获取标签与简介\n                        if (novel.tags.length === 0 || novel.description === \"\") {\n                            let firstNovel = util.getAjaxJson(util.urlNovelDetailed(series.firstNovelId)).body\n                            if (novel.tags.length === 0) {\n                                novel.tags = firstNovel.tags.tags.map(item => item.tag)\n                            }\n\n                            if (novel.description === \"\") {\n                                novel.description = firstNovel.description\n                            }\n                        }\n                        novel.tags.unshift(\"长篇\")\n                        break\n                    } catch (e) {\n                        java.log(e)\n                    }\n                }\n            }\n        }\n    })\n    return novels\n}\n\nfunction handlerFactory() {\n    let cookie = String(java.getCookie(\"https://www.pixiv.net/\", null))\n    if (cookie === null || cookie === undefined || cookie === \"\") {\n        return handlerNoLogin()\n    }\n    if (baseUrl.indexOf(\"/bookmark\") !== -1) {\n        return handlerBookMarks()\n    }\n    if (baseUrl.indexOf(\"/top\") !== -1) {\n        return handlerRecommend()\n    }\n    if (baseUrl.indexOf(\"/follow_latest\") !== -1) {\n        return handlerFollowLatest()\n    }\n    if (baseUrl.indexOf(\"/watch_list\") !== -1) {\n        return handlerWatchList()\n    }\n}\n\nfunction handlerNoLogin() {\n    return () => {\n        java.longToast(\"此功能需要在书源登录后才能使用\")\n        return []\n    }\n}\n\n// 推荐小说\nfunction handlerRecommend() {\n    return () => {\n        let res = JSON.parse(result)\n        const recommend = res.body.page.recommend\n        const novels = res.body.thumbnails.novel\n        let nidSet = new Set(recommend.ids)\n        // java.log(nidSet.size)\n        let list = novels.filter(novel => nidSet.has(String(novel.id)))\n        // java.log(`过滤结果:${JSON.stringify(list)}`)\n        return util.formatNovels(handNovels(util.combineNovels(list)))\n    }\n}\n\n// 收藏小说\nfunction handlerBookMarks() {\n    return () => {\n        let resp = JSON.parse(result).body.works\n        if (resp === undefined || resp.length === 0) {\n            //流程无法本环节中止 只能交给下一流程处理\n            return []\n        }\n\n        return util.formatNovels(handNovels(resp))\n    }\n}\n\n//关注作者，近期小说\nfunction handlerFollowLatest() {\n    return () => {\n        let resp = JSON.parse(result)\n        return util.formatNovels(handNovels(util.combineNovels(resp.body.thumbnails.novel)))\n    }\n}\n\n// 追更列表\nfunction handlerWatchList(){\n    return () => {\n        let resp = JSON.parse(result)\n        let novels = []\n        let seriesList = resp.body.thumbnails.novelSeries\n        for (let i in seriesList) {\n            let novelId = seriesList[i].latestEpisodeId  // 使用最后一篇小说，重新请求并合并小说\n            novels.push(util.getAjaxJson(util.urlNovelDetailed(novelId)).body.userNovels[`${novelId}`])\n        }\n        return util.formatNovels(handNovels(util.combineNovels(novels)))\n    }\n}\n\n(() => {\n    return handlerFactory()()\n})()",
            "bookUrl": "detailedUrl",
            "coverUrl": "coverUrl",
            "intro": "description",
            "kind": "tags",
            "lastChapter": "latestChapter",
            "name": "title",
            "wordCount": "textCount"
        },
        "ruleSearch": {
            "author": "userName",
            "bookList": "@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nvar first = true;\n// 存储seriesID·\nvar seriesSet = {\n    keywords: \"Pixiv:Search\",\n    has: (value) => {\n        let page = Number(java.get(\"page\"))\n        if (page === 1 && first) {\n            first = false\n            cache.deleteMemory(this.keywords)\n            return false\n        }\n\n        let v = cache.getFromMemory(this.keywords)\n        if (v === undefined || v === null) {\n            return false\n        }\n        let set = new Set(JSON.parse(v))\n        return set.has(value)\n    },\n\n    add: (value) => {\n        let v = cache.getFromMemory(this.keywords)\n        if (v === undefined || v === null) {\n            cache.putMemory(this.keywords, JSON.stringify([value]))\n\n        } else {\n            let arr = JSON.parse(v)\n            if (typeof arr === \"string\") {\n                arr = Array(arr)\n            }\n            arr.push(value)\n            cache.putMemory(this.keywords, JSON.stringify(arr))\n        }\n    },\n};\n\nfunction handNovels(novels){\n    novels.forEach(novel => {\n        if (novel.tags === undefined || novel.tags === null) {\n            novel.tags = []\n        }\n\n        if (novel.isOneshot !== undefined) { // 搜索系列\n            // novel.title = novel.title\n            novel.url = novel.cover.urls[\"480mw\"]\n            novel.description = novel.caption\n            novel.textCount = novel.textLength\n\n            if (novel.isOneshot === true) {\n                novel.id = novel.novelId  // 获取真正的 novelid\n                novel.tags.unshift(\"单本\")\n            } else {  //系列\n                novel.seriesId = novel.id  // 获取系列小说id\n                // novel.id = novel.latestEpisodeId  // 最近一篇\n                // novel.lastChapter = this.getAjaxJson(this.urlNovelDetailed(novel.id)).body.title\n            }\n\n        } else {  // 搜索作者\n            // novel.id = novel.id\n            // novel.url = novel.url\n            // novel.description = novel.description\n            // novel.textCount = novel.textCount\n            if (novel.seriesId === undefined || novel.seriesId === null) {\n                // novel.title = novel.title  // 搜索作者获取的单篇\n                novel.seriesId = undefined\n                novel.latestChapter = novel.title\n                novel.tags.unshift(\"单本\")\n            } else {  // 搜索作者获取的系列篇目\n                novel.title = novel.seriesTitle\n                // novel.seriesId = novel.seriesId\n            }\n        }\n\n        if (novel.seriesId !== undefined && novel.seriesId !== null) {\n            let series = util.getAjaxJson(util.urlSeriesDetailed(novel.seriesId)).body\n            novel.id = series.firstNovelId\n            // 发送请求获取第一章 获取标签与简介\n            if (novel.tags.length === 0 || novel.description === \"\") {\n                let firstNovel = util.getAjaxJson(util.urlNovelDetailed(series.firstNovelId)).body\n                if (novel.tags.length === 0) {\n                    novel.tags = firstNovel.tags.tags.map(item => item.tag)\n                }\n                if (novel.description === \"\") {\n                    novel.description = firstNovel.description\n                }\n            }\n            novel.tags.unshift(\"长篇\")\n        }\n    })\n    util.debugFunc(() => {\n        java.log(`处理小说完成`)\n    })\n    return novels\n}\n\nfunction isLogin() {\n    let cookie = String(java.getCookie(\"https://www.pixiv.net/\", null))\n    return typeof cookie === \"string\" && cookie !== \"\"\n}\n\nfunction getUserNovels(username) {\n    if (!isLogin()) {\n        return []\n    }\n\n    let html = java.ajax(util.urlSearchUser(username))\n    // java.log(html)\n    // 仅匹配有投稿作品的用户\n    let match = html.match(new RegExp(`\"userIds\":\\\\[(?:(?:\\\\d+,?)+)]`))\n    // [\"\\\"userIds\\\":[34568581,4569033,3024386]\"]\n    // java.log(JSON.stringify(match))\n    if (match === null || match.length === 0) {\n        html = java.ajax(util.urlSearchUserPartial(username))\n        match = html.match(new RegExp(`\"userIds\":\\\\[(?:(?:\\\\d+,?)+)]`))\n        if (match === null || match.length === 0) {\n            return []\n        }\n    }\n\n    match = JSON.stringify(match).replace(\"\\\\\",\"\").split(\",\")\n    // java.log(JSON.stringify(match))\n    let regNumber = new RegExp(\"\\\\d+\")\n    let uidList = match.map(v => {\n        return v.match(regNumber)[0]\n    })\n\n    // 仅限3个作者\n    java.log(JSON.stringify(uidList))\n    if (uidList.length >= 3) {\n        uidList.length = 3\n    }\n\n    let novels = []\n    let page = Number(java.get(\"page\"))\n\n    uidList.forEach(id => {\n        let r = util.getAjaxJson(util.urlUserAllWorks(id))\n        let novelsId = Object.keys(r.body.novels).reverse().slice((page - 1) * 20, page * 20)\n        let url = util.urlUserNovels(id, novelsId)\n        util.debugFunc(() => {\n            java.log(`发送获取作者小说的Ajax请求:${url}`)\n        })\n        let userNovels = util.getWebviewJson(url, html => {\n            return (html.match(new RegExp(\">\\\\{.*?}<\"))[0].replace(\">\", \"\").replace(\"<\", \"\"))\n        }).body\n        // 获取对应的小说 该序列是按照id排序\n        // 反转以按照更新时间排序\n        novels = novels.concat(Object.values(userNovels).reverse())\n    })\n\n    util.debugFunc(() => {\n        java.log(`获取用户搜索小说结束`)\n    })\n    return novels\n}\n\n(() => {\n    let novelsList = []\n    novelsList = novelsList.concat((JSON.parse(result).body.novel.data))\n    novelsList = novelsList.concat(getUserNovels(String(java.get(\"key\"))))\n    return util.formatNovels(handNovels(novelsList))\n})();",
            "bookUrl": "detailedUrl",
            "checkKeyWord": "测试页面",
            "coverUrl": "coverUrl",
            "intro": "description",
            "kind": "tags",
            "lastChapter": "latestChapter",
            "name": "title",
            "wordCount": "textCount"
        },
        "ruleToc": {
            "chapterList": "@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction oneShotHandler(res) {\n    return [{\n        title: res.title,\n        chapterUrl: util.urlNovel(res.id),\n        updateDate: util.timeTextFormat(res.createDate)\n    }]\n}\n\nfunction seriesHandler(res) {\n    const limit = 30\n    let returnList = [];\n    let seriesID = res.seriesNavData.seriesId\n    let allChaptersCount = (() => {\n        let result = util.getAjaxJson(util.urlSeriesDetailed(seriesID)).body.total\n        util.debugFunc(() => {\n            java.log(`本目录一共有:${result} 章节`);\n        })\n        return result;\n    })();\n\n    //发送请求获得相应数量的目录列表\n    function sendAjaxForGetChapters(lastIndex) {\n        res = util.getAjaxJson(util.urlSeriesNovels(seriesID, limit, lastIndex)).body.thumbnails.novel\n        res.forEach(v => {\n            v.title = v.title.replace(`${v.seriesTitle}`, \"\").replace(RegExp(/（|）|-/g), \"\")\n            v.chapterUrl = util.urlNovel(v.id)\n            v.updateDate = util.timeTextFormat(v.createDate)\n            util.debugFunc(() => {\n                java.log(`${v.title}`)\n            })\n        })\n        return res;\n    }\n\n    //逻辑控制者 也就是使用上面定义的两个函数来做对应功能\n    //要爬取的总次数\n    let max = (allChaptersCount / limit) + 1\n    for (let i = 0; i < max; i++) {\n        //java.log(\"i的值:\"+i)\n        let list = sendAjaxForGetChapters(i * limit);\n        //取出每个值\n        returnList = returnList.concat(list)\n        // java.log(JSON.stringify(returnList))\n    }\n    return returnList\n}\n\n(() => {\n    // 获取网址id，请求并解析数据，调试用\n    var novelId = 0, res = \"\"\n    let isHtml = result.startsWith(\"<!DOCTYPE html>\")\n    if (isHtml) {\n        let isSeries = baseUrl.match(new RegExp(\"pixiv.net/(ajax/|)novel/series\"))\n        if (isSeries) {\n            let seriesId = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n            java.log(`系列ID：${seriesId}`)\n            novelId = util.getAjaxJson(util.urlSeriesDetailed(seriesId)).body.firstNovelId\n            java.log(`首篇小说ID：${novelId}`)\n            res = util.getAjaxJson(util.urlNovelDetailed(novelId)).body\n        } else {\n            let isNovel = baseUrl.match(new RegExp(\"pixiv.net/(ajax/|)novel\"))\n            if (isNovel) {\n                novelId = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n                java.log(`详情：匹配小说ID：${novelId}`)\n                res = util.getAjaxJson(util.urlNovelDetailed(novelId)).body\n            } else {\n                return []\n            }\n        }\n    } else {\n        res = JSON.parse(result).body\n        if (res.total === 0) {\n            return []\n        }\n    }\n\n    if (res.seriesNavData === null || res.seriesNavData === undefined) {\n        return oneShotHandler(res)\n    }\n    return seriesHandler(res)\n})()",
            "chapterName": "title",
            "chapterUrl": "chapterUrl",
            "updateTime": "updateDate"
        },
        "searchUrl": "@js:\njava.put(\"page\",page);java.put(\"key\",key);\n`https://www.pixiv.net/ajax/search/novels/${encodeURI(key)}?word=${encodeURI(key)}&order=date_d&mode=all&p=${page}&s_mode=s_tag&gs=1&lang=zh`;",
        "weight": 0
    },
    {
        "bookSourceComment": "Pixiv 书源（单篇小说）（更新时间：2024-12-06）\n\n可用功能：✅搜索✅发现✅添加链接✅订阅源\n搜索小说：✅小说名称✅作者名称✅小说标签\n发现小说：✅关注作者✅追更列表✅推荐✅收藏\n添加网址：✅Pixiv小说链接✅Pixiv系列小说链接\n订阅用法：点击订阅源打开小说/系列小说，【刷新】，点击【加入书架】按钮，添加小说到书架\n\n书源发布：兽人阅读频道 https://t.me/FurryReading\n项目地址：https://github.com/windyhusky/PixivSource\n\n规则订阅：\n1️⃣ Pixiv 书源：\nhttps://cdn.jsdelivr.net/gh/windyhusky/PixivSource@main/pixiv.json\nhttps://raw.githubusercontent.com/windyhusky/PixivSource/main/pixiv.json\n\n2️⃣ Pixiv 订阅源：\nhttps://cdn.jsdelivr.net/gh/windyhusky/PixivSource@main/btsrk.json\nhttps://raw.githubusercontent.com/windyhusky/PixivSource/main/btsrk.json",
        "bookSourceGroup": "🔞 Pixiv",
        "bookSourceName": "Pixiv 单篇小说",
        "bookSourceType": 0,
        "bookSourceUrl": "https://www.pixiv.net",
        "bookUrlPattern": "(https?://)?(www\\.)?pixiv\\.net(/ajax)?/novel/(show\\.php\\?id=|series/)?\\d+",
        "customOrder": 2,
        "enabled": true,
        "enabledCookieJar": false,
        "enabledExplore": true,
        "exploreUrl": "[\n  {\n    \"title\": \"关注作者\",\n    \"url\": \"https://www.pixiv.net/ajax/follow_latest/novel?p={{page}}&mode=all&lang=zh\",\n    \"style\": {\n      \"layout_flexGrow\": 1,\n      \"layout_flexBasisPercent\":0.3\n    }\n  },\n    {\n    \"title\": \"追更列表\",\n    \"url\": \"https://www.pixiv.net/ajax/watch_list/novel?p={{page}}&new=1&lang=zh\",\n    \"style\": {\n      \"layout_flexGrow\": 1,\n      \"layout_flexBasisPercent\":0.3\n    }\n  },\n  {\n    \"title\": \"推荐小说\",\n    \"url\": \"https://www.pixiv.net/ajax/top/novel?mode=all&lang=zh\",\n    \"style\": {\n      \"layout_flexGrow\": 1,\n      \"layout_flexBasisPercent\":0.3\n    }\n  },\n  {\n    \"title\": \"收藏小说\",\n    \"url\": \"https://www.pixiv.net/ajax/user/{{cache.get(\\\"pixiv:uid\\\")}}/novels/bookmarks?tag=&offset={{(page-1)*24}}&limit=24&rest=show&lang=zh\",\n    \"style\": {\n      \"layout_flexGrow\": 1,\n      \"layout_flexBasisPercent\":0.3\n    }\n  }\n]",
        "header": "{\"referer\":\"https://www.pixiv.net\"}",
        "lastUpdateTime": 1733446163123,
        "loginCheckJs": "var util = {}\n\nfunction objStringify(obj) {\n    return JSON.stringify(obj, (n, v) => {\n        if (typeof v == \"function\")\n            return v.toString();\n        return v;\n    });\n}\n\nfunction publicFunc() {\n    let u = {}\n    u.SHOW_ORIGINAL_NOVEL_LINK = true   // 目录处显示 Pixiv 小说链接，但会增加请求次数\n    // u.SHOW_ORIGINAL_NOVEL_LINK = false  // 目录不显示 Pixiv 小说链接，可以减少请求次数\n    u.REPLACE_WITH_BOOK_TITLE_MARKS = true  // 注音内容为汉字时，替换为书名号 `[[rb:汉字 > 注音]] => 汉字《注音》`\n    // u.REPLACE_WITH_BOOK_TITLE_MARKS = false // 注音内容默认替换为括号`[[rb:汉字 > 注音]] => 汉字（注音）`\n    u.DEBUG = false  // 调试模式\n\n    u.cacheGetAndSet = (key, supplyFunc) => {\n        let v = cache.get(key)\n        if (v === undefined || v === null) {\n            v = JSON.stringify(supplyFunc())\n            // 缓存10分钟\n            cache.put(key, v, 600)\n        }\n        return JSON.parse(v)\n    }\n    u.getAjaxJson = (url) => {\n        return util.cacheGetAndSet(url, () => {\n            return JSON.parse(java.ajax(url))\n        })\n    }\n    u.getWebviewJson = (url, parseFunc) => {\n        return util.cacheGetAndSet(url, () => {\n            let html = java.webView(null, url, null)\n            return JSON.parse(parseFunc(html))\n        })\n    }\n    u.debugFunc = (func) => {\n        if (String(source.getVariable()) === \"debug\" || util.DEBUG === true) {\n            func()\n        }\n    }\n\n    u.urlNovelUrl = (novelId) =>{\n        return `https://www.pixiv.net/novel/show.php?id=${novelId}`\n    }\n    u.urlNovelDetailed = (novelId) => {\n        return `https://www.pixiv.net/ajax/novel/${novelId}`\n    }\n    u.urlNovel = (novelId) => {\n        if (util.SHOW_ORIGINAL_NOVEL_LINK === true) {\n            return util.urlNovelUrl(novelId)\n        } else {\n            return util.urlNovelDetailed(novelId)\n        }\n    }\n\n    u.urlSeriesUrl = (seriesId) => {\n        return `https://www.pixiv.net/novel/series/${seriesId}`\n    }\n    u.urlSeriesDetailed = (seriesId) => {\n        return `https://www.pixiv.net/ajax/novel/series/${seriesId}?lang=zh`\n    }\n    u.urlSeriesNovels = (seriesId, limit, offset) => {\n        if (limit > 30) {\n            limit = 30\n        }\n        if (limit < 10) {\n            limit = 10\n        }\n        return `https://www.pixiv.net/ajax/novel/series_content/${seriesId}?limit=${limit}&last_order=${offset}&order_by=asc&lang=zh`\n    }\n\n    u.urlUserUrl = function (id) {\n        return `https://www.pixiv.net/users/${id}`\n    }\n    u.urlUserAllWorks = (uesrId) => {\n        return `https://www.pixiv.net/ajax/user/${uesrId}/profile/all?lang=zh`\n    }\n    u.urlUserNovels = (nid, nidList) => {\n        return `https://www.pixiv.net/ajax/user/${nid}/novels?${nidList.map(v => \"ids[]=\" + v).join(\"&\")}`\n    }\n\n    u.urlSearchNovel = (novelName, page) =>{\n        return `https://www.pixiv.net/ajax/search/novels/${encodeURI(novelName)}?word=${encodeURI(novelName)}&order=date_d&mode=all&p=${page}&s_mode=s_tag&lang=zh`\n    }\n    u.urlSearchSeries = (seriesName, page) => {\n        return`https://www.pixiv.net/ajax/search/novels/${encodeURI(seriesName)}?word=${encodeURI(seriesName)}&order=date_d&mode=all&p=${page}&s_mode=s_tag&gs=1&lang=zh`\n    }\n    // 完全匹配用户名\n    u.urlSearchUser = (username) => {\n        return `https://www.pixiv.net/search/users?nick=${encodeURI(username)}&s_mode=s_usr&nick_mf=1`\n    }\n    u.urlSearchUserPartial = (username) => {\n        return `https://www.pixiv.net/search/users?nick=${encodeURI(username)}&s_mode=s_usr`\n    }\n\n    u.urlCoverUrl = (url) => {\n        return `${url},{\"headers\": {\"Referer\":\"https://www.pixiv.net/\"}}`\n    }\n    u.urlIllustUrl = (illustId) => {\n        return `https://www.pixiv.net/artworks/${illustId}`\n    }\n    u.urlIllustDetailed = (illustId) => {\n        return `https://www.pixiv.net/ajax/illust/${illustId}?lang=zh`\n    }\n    u.urlIllustOriginal = function (illustId, order) {\n        let illustOriginal = util.getAjaxJson(util.urlIllustDetailed(illustId)).body.urls.original\n        if (order >= 1) {\n            illustOriginal = illustOriginal.replace(`_p0`, `_p${order - 1}`)\n        }\n        return illustOriginal\n    }\n\n    u.urlSeriesIllustsUrl = (uesrId, seriesId) => {\n        return `https://www.pixiv.net/user/${uesrId}/series/${seriesId}`\n    }\n    u.urlSeriesIllustsDetailed = (seriesId) => {\n        return `https://www.pixiv.net/ajax/series/${seriesId}?p=1&lang=zh`\n    }\n\n    u.formatNovels = function (novels) {\n        novels.forEach(novel => {\n            // novel.title = novel.title\n            // novel.userName = novel.userName\n            novel.tags = novel.tags.join(\",\")\n\n            if (novel.isOneshot === undefined) {  //单篇小说\n                // novel.textCount = novel.textCount\n                // novel.createDate = novel.createDate\n                // novel.updateDate = novel.updateDate\n                // novel.description = novel.description\n                novel.lastChapter = novel.title\n                novel.coverUrl = novel.url\n                novel.aiType = novel.aiType - 1\n\n            } else {  // 兼容系列搜索\n                if (novel.isOneshot === true) {\n                    novel.id = novel.novelId  //单篇（完结？）小说\n                    novel.lastChapter = novel.title\n                    novel.aiType = novel.aiType / 2\n\n                } else {  // 真正的系列小说\n                    novel.id = novel.latestEpisodeId  // 最近一篇\n                    novel.latestPublishDate = novel.latestPublishDateTime\n                    novel.seriesId = novel.id        // 真正的系列小说id\n                    // let series = this.getAjaxJson(util.urlSeriesDetailed(novel.seriesId)).body\n                    // novel.id = series.firstNovelId\n                    // novel.aiType = novel.aiType\n                }\n                novel.textCount = novel.textLength\n                novel.createDate = novel.createDateTime\n                novel.updateDate = novel.updateDateTime\n                novel.description = novel.caption\n                novel.coverUrl = novel.cover.urls[\"480mw\"] // 240mw, 480mw, 1200x1200, 128x128, original\n            }\n\n            novel.coverUrl = this.urlCoverUrl(novel.coverUrl)\n            novel.detailedUrl = this.urlNovelDetailed(novel.id)\n            novel.readingTime = `${novel.readingTime / 60} 分钟`\n            const time1 = this.dateFormat(novel.createDate);\n            const time2 = this.dateFormat(novel.updateDate);\n            novel.description = `${novel.description}\\n上传时间：${time1}\\n更新时间：${time2}`\n            //novel.description= `书名：${novel.title}\\n作者：${novel.userName}\\n标签：${novel.tags}\\n上传：${time1}\\n更新：${time2}\\n简介：${novel.description}`\n        })\n        return novels\n    }\n\n    // 将多个长篇小说解析为一本书\n    u.combineNovels = function (novels) {\n        return novels.filter(novel => {\n            // 单本直接解析为一本书\n            if (novel.seriesId === undefined || novel.seriesId === null) {\n                return true\n            }\n            // 集合中没有该系列解析为一本书\n            if (!seriesSet.has(novel.seriesId)) {\n                seriesSet.add(novel.seriesId)\n                return true\n            }\n            return false\n        })\n    }\n\n    u.dateFormat = function (str) {\n        let addZero = function (num) {\n            return num < 10 ? '0' + num : num;\n        }\n        let time = new Date(str);\n        let Y = time.getFullYear() + \"年\";\n        let M = addZero(time.getMonth() + 1) + \"月\";\n        let D = addZero(time.getDate()) + \"日\";\n        return Y + M + D;\n    }\n    u.timeStampFormat = function (int) {\n        let addZero = function (num) {\n            return num < 10 ? '0' + num : num;\n        }\n        let time = new Date(int * 1000);\n        let Y = time.getFullYear()\n        let M = addZero(time.getMonth() + 1)\n        let D = addZero(time.getDate())\n        let h = addZero(time.getHours())\n        let m = addZero(time.getMinutes())\n        let s = addZero(time.getSeconds())\n        return `${Y}-${M}-${D} ${h}:${m}:${s}`\n    }\n    u.timeTextFormat = function (text) {\n        return `${text.slice(0, 10)} ${text.slice(11, 19)}`\n    }\n\n    util = u\n    java.put(\"util\", objStringify(u))\n}\n\npublicFunc()\n\n// 获取请求的user id方便其他ajax请求构造\nlet uid = java.getResponse().headers().get(\"x-userid\")\nif (uid != null) {\n    cache.put(\"pixiv:uid\", uid)\n}\njava.getStrResponse(null, null)",
        "loginUrl": "https://accounts.pixiv.net/login",
        "respondTime": 180000,
        "ruleBookInfo": {
            "author": "userName",
            "canReName": "True",
            "coverUrl": "coverUrl",
            "init": "@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\n(function (res) {\n    // 获取网址id，请求并解析数据\n    var novelId = 0\n    let isHtml = result.startsWith(\"<!DOCTYPE html>\")\n    if (isHtml) {\n        let isSeries = baseUrl.match(new RegExp(\"pixiv(\\\\.net|)/(ajax/)?(novel/)?series/\\\\d+\"))\n        if (isSeries) {\n            let seriesId = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n            java.log(`系列ID：${seriesId}`)\n            novelId = util.getAjaxJson(util.urlSeriesDetailed(seriesId)).body.firstNovelId\n            java.log(`首篇小说ID：${novelId}`)\n            res = util.getAjaxJson(util.urlNovelDetailed(novelId)).body\n        } else {\n            let isNovel = baseUrl.match(new RegExp(\"pn|pixiv(\\\\.net)?/(ajax/)?novel\"))\n            if (isNovel) {\n                novelId = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n                java.log(`详情：匹配小说ID：${novelId}`)\n                res = util.getAjaxJson(util.urlNovelDetailed(novelId)).body\n            } else {\n                return []\n            }\n        }\n    } else {\n        // 从搜索直接获取 json\n        res = JSON.parse(result).body\n        if (res.total === 0) {\n            return []\n        }\n    }\n\n\n    try {\n        let info = {}\n        info.noveId = res.id\n        info.title = res.title\n        info.userName = res.userName\n        // info.tags = res.tags 　// complex array 不好取数据\n        // info.textCount = res.textCount  // 无数据\n        info.tags = res.userNovels[`${info.noveId}`].tags\n        // info.textCount = res.userNovels[`${info.noveId}`].textCount\n        // info.readingTime = `${res.userNovels[`${info.noveId}`].readingTime / 60} 分钟`\n        info.latestChapter = \"\"\n        info.description = res.description\n        info.coverUrl = res.coverUrl\n        info.catalogUrl = util.urlNovelDetailed(info.noveId)\n\n        if (res.seriesNavData === undefined || res.seriesNavData === null) {\n            info.title = info.latestChapter = res.title\n            info.userName = res.userName\n            // info.tags = res.userNovels[`${info.noveId}`].tags\n            info.tags.unshift('单本')\n            info.textCount = res.userNovels[`${info.noveId}`].textCount\n            info.latestChapter = res.title\n            info.description = res.description\n            info.coverUrl = res.coverUrl\n            info.createDate = res.createDate\n            info.updateDate = res.uploadDate\n\n        } else {  // 系列小说\n            info.seriesId = res.seriesNavData.seriesId\n            info.title = res.seriesNavData.title\n            java.log(`系列小说：${info.seriesId}，${info.title}`)\n            res2 = JSON.parse(java.ajax(util.urlSeriesDetailed(res.seriesNavData.seriesId))).body\n            // java.log(JSON.stringify(res2))\n            // info.title = res2.title\n            // info.userName = res2.userName\n            info.tags.push.apply(res2.tags)   //合并当前章节 tags\n            info.tags.unshift('长篇')\n            info.textCount = res2.publishedTotalCharacterCount\n            info.readingTime = `${res2.publishedReadingTime / 60} 分钟`\n            info.latestChapter = \"\"\n            info.description = `${res2.caption}\\n当前章节简介：\\n${info.description}`\n            // info.coverUrl = res2.firstEpisode.url   // 第一章封面\n            info.coverUrl = res2.cover.urls[\"480mw\"] // 240mw, 480mw, 1200x1200, 128x128, original\n            info.createDate = res2.createDate\n            info.updateDate = res2.updateDate\n            info.totalChapterNum = res2.displaySeriesContentCount  //章节总数\n            // info.language = res2.language\n            // info.total = res2.total\n            // info.firstNovelId = res2.firstNovelId\n            // info.latestNovelId = res2.latestNovelId\n        }\n        info.tags = info.tags.join(\",\")\n        const time = util.dateFormat(info.updateDate)\n        info.description  = `${info.description}\\n更新时间:${time}`\n        //info.description = `\\n书名：${info.title}\\n作者：${info.userName}\\n标签：${info.tags}\\n更新：${time}\\n简介：${info.description}`\n        return info\n\n    } catch (e) {\n        java.log(`受 Pixiv 的限制，无法获取小说ID： ${novelId} 的数据`)\n        java.longToast(`受 Pixiv 的限制，无法获取小说ID： ${novelId} 的数据`)\n    }\n})();",
            "intro": "description",
            "kind": "tags",
            "lastChapter": "latestChapter",
            "name": "title",
            "tocUrl": "catalogUrl",
            "wordCount": "textCount"
        },
        "ruleContent": {
            "content": "@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\n(() => {\n    // 获取网址id，请求并解析数据，调试用\n    var novelId = 0, res = \"\"\n    let isHtml = result.startsWith(\"<!DOCTYPE html>\")\n    if (isHtml) {\n        let isSeries = baseUrl.match(new RegExp(\"pixiv.net/(ajax/|)novel/series\"))\n        if (isSeries) {\n            let seriesId = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n            java.log(`系列ID：${seriesId}`)\n            novelId = util.getAjaxJson(util.urlSeriesDetailed(seriesId)).body.firstNovelId\n            java.log(`首篇小说ID：${novelId}`)\n            res = util.getAjaxJson(util.urlNovelDetailed(novelId)).body\n        } else {\n            let isNovel = baseUrl.match(new RegExp(\"pixiv.net/(ajax/|)novel\"))\n            if (isNovel) {\n                novelId = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n                java.log(`正文：匹配小说ID：${novelId}`)\n                res = util.getAjaxJson(util.urlNovelDetailed(novelId)).body\n            } else {\n                return []\n            }\n        }\n    } else {\n        res = JSON.parse(result).body\n        if (res.total === 0) {\n            return []\n        }\n    }\n\n    let content = res.content\n    // 在正文内部添加小说描述\n    if (res.seriesNavData !== undefined && res.seriesNavData !== null && res.description !== \"\") {\n        content = res.description + \"\\n\" + \"——————————\\n\".repeat(2) + content\n    }\n\n    // 获取 [uploadedimage:] 的图片链接\n    let hasEmbeddedImages = res.textEmbeddedImages !== undefined && res.textEmbeddedImages !== null\n    if (hasEmbeddedImages) {\n        Object.keys(res.textEmbeddedImages).forEach((key) => {\n            content = content.replace(`[uploadedimage:${key}]`, `<img src=\"${res.textEmbeddedImages[key].urls.original}\">`)\n        })\n    }\n\n    // 获取 [pixivimage:] 的图片链接 [pixivimage:1234] [pixivimage:1234-1]\n    let matched = content.match(RegExp(/\\[pixivimage:(\\d+)-?(\\d+)]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let illustId, order\n            let matched2 = matched[i].match(RegExp(\"(\\\\d+)-?(\\\\d+)\"))\n            let temp = matched2[0].split(\"-\")\n            illustId = temp[0]\n            if (temp.length >= 2) {\n                order = temp[1]\n            }\n            content = content.replace(`${matched[i]}`, `<img src=\"${util.urlIllustOriginal(illustId, order)}\">`)\n        }\n    }\n\n    // 替换 Pixiv 分页标记符号 [newpage]\n    matched = content.match(RegExp(/[ 　]*\\[newpage][ 　]*/gm))\n    if (matched) {\n        for (let i in matched){\n            java.log(matched[i])\n            content = content.replace(`${matched[i]}`, `${\"<p>​<p/>\".repeat(3)}`)\n        }\n    }\n\n    // 替换 Pixiv 章节标记符号 [chapter:]\n    matched = content.match(RegExp(/\\[chapter:(.*?)]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let matched2 = matched[i].match(/\\[chapter:(.*?)]/m)\n            let chapter = matched2[1].trim()\n            content = content.replace(`${matched[i]}`, `${chapter}<p>​<p/>`)\n        }\n    }\n\n    // 替换 Pixiv 跳转页面标记符号 [[jump:]]\n    matched = content.match(RegExp(/\\[jump:(\\d+)]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let page = matched[i].match(/\\d+/)\n            content = content.replace(`${matched[i]}`, `\\n\\n跳转至第${page}节`)\n        }\n    }\n\n    // 替换 Pixiv 链接标记符号 [[jumpuri: > ]]\n    matched = content.match(RegExp(/\\[\\[jumpuri:(.*?)>(.*?)]]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let matched2 = matched[i].match(/\\[\\[jumpuri:(.*?)>(.*?)]]/m)\n            let matchedText = matched2[0]\n            let urlName = matched2[1].trim()\n            let urlLink = matched2[2].trim()\n            // 阅读不支持超链接\n            //content = content.replace(`${matchedText}`, `<a href=${urlLink}>${urlName}</a>`)\n            if (urlLink === urlName) {\n                content = content.replace(`${matchedText}`, `${urlName}`)\n            } else {\n                content = content.replace(`${matchedText}`, `${urlName}: ${urlLink}`)\n            }\n        }\n    }\n\n    // 替换 Pixiv 注音标记符号 [[rb: > ]]\n    matched = content.match(RegExp(/\\[\\[rb:(.*?)>(.*?)]]/gm))\n    if (matched) {\n        for (let i in matched) {\n            let matched2 = matched[i].match(/\\[\\[rb:(.*?)>(.*?)]]/m)\n            let matchedText = matched2[0]\n            let kanji = matched2[1].trim()\n            let kana = matched2[2].trim()\n\n            if (util.REPLACE_WITH_BOOK_TITLE_MARKS === true) {\n                // 默认替换成（括号）\n                content = content.replace(`${matchedText}`, `${kanji}（${kana}）`)\n            } else {\n                var reg = new RegExp(\"[\\\\u4E00-\\\\u9FFF]+\",\"g\");\n                if (reg.test(kana)) {\n                    // kana为中文，则替换回《书名号》\n                    content = content.replace(`${matchedText}`, `${kanji}《${kana}》`)\n                } else{\n                    // 阅读不支持 <ruby> <rt> 注音\n                    // content = content.replace(`${matchedText}`, `<ruby>${kanji}<rt>${kana}</rt></ruby>`)\n                    content = content.replace(`${matchedText}`, `${kanji}（${kana}）`)\n                }\n            }\n        }\n    }\n\n    return content\n})()\n",
            "imageStyle": "DEFAULT",
            "nextContentUrl": "",
            "title": ""
        },
        "ruleExplore": {
            "author": "userName",
            "bookList": "@js:\nvar util = objParse(String(java.get(\"util\")))\nvar seriesSet = new Set();  // 存储seriesID 有BUG无法处理翻页\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction handNovels(novels) {\n    novels.forEach(novel => {\n        if (novel.tags === undefined || novel.tags === null) {\n            novel.tags = []\n        }\n\n        if (novel.seriesId === undefined || novel.seriesId === null) {\n            novel.tags.unshift(\"单本\")\n        } else {\n            let userAllWorks = util.getAjaxJson(util.urlUserAllWorks(novel.userId)).body\n            for (let series of userAllWorks.novelSeries) {\n                if (series.id === novel.seriesId) {\n                    // let series = util.getAjaxJson(util.urlSeriesDetailed(novel.seriesId)).body\n                    novel.textCount = series.publishedTotalCharacterCount\n                    novel.url = series.cover.urls[\"480mw\"]\n                    novel.title = series.title\n                    novel.tags = series.tags\n                    novel.description = series.caption\n\n                    try{\n                        // 发送请求获取第一章 获取标签与简介\n                        if (novel.tags.length === 0 || novel.description === \"\") {\n                            let firstNovel = util.getAjaxJson(util.urlNovelDetailed(series.firstNovelId)).body\n                            if (novel.tags.length === 0) {\n                                novel.tags = firstNovel.tags.tags.map(item => item.tag)\n                            }\n\n                            if (novel.description === \"\") {\n                                novel.description = firstNovel.description\n                            }\n                        }\n                        novel.tags.unshift(\"长篇\")\n                        break\n                    } catch (e) {\n                        java.log(e)\n                    }\n                }\n            }\n        }\n    })\n    return novels\n}\n\nfunction handlerFactory() {\n    let cookie = String(java.getCookie(\"https://www.pixiv.net/\", null))\n    if (cookie === null || cookie === undefined || cookie === \"\") {\n        return handlerNoLogin()\n    }\n    if (baseUrl.indexOf(\"/bookmark\") !== -1) {\n        return handlerBookMarks()\n    }\n    if (baseUrl.indexOf(\"/top\") !== -1) {\n        return handlerRecommend()\n    }\n    // if (baseUrl.indexOf(\"/following\") !== -1) {\n    //     return handlerFollowing()\n    // }\n    if (baseUrl.indexOf(\"/follow_latest\") !== -1) {\n        return handlerFollowLatest()\n    }\n    if (baseUrl.indexOf(\"/watch_list\") !== -1) {\n        return handlerWatchList()\n    }\n}\n\nfunction handlerNoLogin() {\n    return () => {\n        java.longToast(\"此功能需要在书源登录后才能使用\")\n        return []\n    }\n}\n// //关注作者（按顺序）\n// function handlerFollowing() {\n//     return () => {\n//         let novelList = []\n//         JSON.parse(result).body.users\n//             .filter(user => user.novels.length > 0)\n//             .map(user => user.novels)\n//             .forEach(novels => {\n//                 return novels.forEach(novel => {\n//                     novelList.push(novel)\n//                 })\n//             })\n//         return util.formatNovels(handNovels(novelList))\n//     }\n// }\n\n// 推荐小说\nfunction handlerRecommend() {\n    return () => {\n        let res = JSON.parse(result)\n        const recommend = res.body.page.recommend\n        const novels = res.body.thumbnails.novel\n        let nidSet = new Set(recommend.ids)\n        // java.log(nidSet.size)\n        let list = novels.filter(novel => nidSet.has(String(novel.id)))\n        // java.log(`过滤结果:${JSON.stringify(list)}`)\n        return util.formatNovels(handNovels(util.combineNovels(list)))\n    }\n}\n\n// 收藏小说\nfunction handlerBookMarks() {\n    return () => {\n        let resp = JSON.parse(result).body.works\n        if (resp === undefined || resp.length === 0) {\n            //流程无法本环节中止 只能交给下一流程处理\n            return []\n        }\n\n        return util.formatNovels(handNovels(resp))\n    }\n}\n\n//关注作者，近期小说\nfunction handlerFollowLatest() {\n    return () => {\n        let resp = JSON.parse(result)\n        return util.formatNovels(handNovels(util.combineNovels(resp.body.thumbnails.novel)))\n    }\n}\n\n// 追更列表\nfunction handlerWatchList(){\n    return () => {\n        let resp = JSON.parse(result)\n        let novels = []\n        let seriesList = resp.body.thumbnails.novelSeries\n        for (let i in seriesList) {\n            let novelId = seriesList[i].latestEpisodeId  // 使用最后一篇小说，重新请求并合并小说\n            novels.push(util.getAjaxJson(util.urlNovelDetailed(novelId)).body.userNovels[`${novelId}`])\n        }\n        return util.formatNovels(handNovels(util.combineNovels(novels)))\n    }\n}\n\n(() => {\n    return handlerFactory()()\n})()",
            "bookUrl": "detailedUrl",
            "coverUrl": "coverUrl",
            "intro": "description",
            "kind": "tags",
            "lastChapter": "latestChapter",
            "name": "title",
            "wordCount": "textCount"
        },
        "ruleSearch": {
            "author": "userName",
            "bookList": "@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\n\nvar first = true;\n// 存储seriesID\nvar seriesSet = {\n    keywords: \"Pixiv:Search\",\n    has: (value) => {\n        let page = Number(java.get(\"page\"))\n        if (page === 1 && first) {\n            first = false\n            cache.deleteMemory(this.keywords)\n            return false\n        }\n\n        let v = cache.getFromMemory(this.keywords)\n        if (v === undefined || v === null) {\n            return false\n        }\n        let set = new Set(JSON.parse(v))\n        return set.has(value)\n    },\n\n    add: (value) => {\n        let v = cache.getFromMemory(this.keywords)\n        if (v === undefined || v === null) {\n            cache.putMemory(this.keywords, JSON.stringify([value]))\n\n        } else {\n            let arr = JSON.parse(v)\n            if (typeof arr === \"string\") {\n                arr = Array(arr)\n            }\n            arr.push(value)\n            cache.putMemory(this.keywords, JSON.stringify(arr))\n        }\n    },\n};\n\n// 处理 novels 列表, 查询作者\nfunction handNovels(novels) {\n    novels.forEach(novel => {\n        if (novel.tags === undefined || novel.tags === null) {\n            novel.tags = []\n        }\n        if (novel.seriesId === undefined || novel.seriesId === null) {\n            novel.tags.unshift(\"单本\")\n            novel.latestChapter = novel.title\n        } else {\n            let userAllWorks = util.getAjaxJson(util.urlUserAllWorks(novel.userId)).body\n            for (let series of userAllWorks.novelSeries) {\n                if (series.id === novel.seriesId) {\n                    // let series = util.getAjaxJson(util.urlSeriesDetailed(novel.seriesId)).body\n                    novel.textCount = series.textLength\n                    novel.url = series.cover.urls[\"480mw\"]\n                    novel.title = series.title\n                    novel.tags = series.tags\n                    novel.description = series.caption\n\n                    // 发送请求获取第一章 获取标签与简介\n                    if (novel.tags.length === 0 || novel.description === \"\") {\n                        let firstNovel = util.getAjaxJson(util.urlNovelDetailed(series.firstNovelId)).body\n                        if (novel.tags.length === 0) {\n                            novel.tags = firstNovel.tags.tags.map(item => item.tag)\n                        }\n\n                        if (novel.description === \"\") {\n                            novel.description = firstNovel.description\n                        }\n                    }\n\n                    novel.tags.unshift(\"长篇\")\n                    break\n                }\n            }\n        }\n    })\n    util.debugFunc(() => {\n        java.log(`处理小说完成`)\n    })\n    return novels\n}\n\nfunction isLogin() {\n    let cookie = String(java.getCookie(\"https://www.pixiv.net/\", null))\n    return typeof cookie === \"string\" && cookie !== \"\"\n}\n\nfunction getUserNovels(username) {\n    if (!isLogin()) {\n        return []\n    }\n\n    let html = java.ajax(util.urlSearchUser(username))\n    // java.log(html)\n    // 仅匹配有投稿作品的用户\n    let match = html.match(new RegExp(`\"userIds\":\\\\[(?:(?:\\\\d+,?)+)]`))\n    // [\"\\\"userIds\\\":[34568581,4569033,3024386]\"]\n    // java.log(JSON.stringify(match))\n    if (match === null || match.length === 0) {\n        html = java.ajax(util.urlSearchUserPartial(username))\n        match = html.match(new RegExp(`\"userIds\":\\\\[(?:(?:\\\\d+,?)+)]`))\n        if (match === null || match.length === 0) {\n            return []\n        }\n    }\n\n    match = JSON.stringify(match).replace(\"\\\\\",\"\").split(\",\")\n    // java.log(JSON.stringify(match))\n    let regNumber = new RegExp(\"\\\\d+\")\n    let uidList = match.map(v => {\n        return v.match(regNumber)[0]\n    })\n\n    // 仅限3个作者\n    java.log(JSON.stringify(uidList))\n    if (uidList.length >= 3) {\n        uidList.length = 3\n    }\n\n    let novels = []\n    let page = Number(java.get(\"page\"))\n\n    uidList.forEach(id => {\n        let r = util.getAjaxJson(util.urlUserAllWorks(id))\n        let novelsId = Object.keys(r.body.novels).reverse().slice((page - 1) * 20, page * 20)\n        let url = util.urlUserNovels(id, novelsId)\n        util.debugFunc(() => {\n            java.log(`发送获取作者小说的Ajax请求:${url}`)\n        })\n        let userNovels = util.getWebviewJson(url, html => {\n            return (html.match(new RegExp(\">\\\\{.*?}<\"))[0].replace(\">\", \"\").replace(\"<\", \"\"))\n        }).body\n        // 获取对应的小说 该序列是按照id排序\n        // 反转以按照更新时间排序\n        novels = novels.concat(Object.values(userNovels).reverse())\n    })\n\n    util.debugFunc(() => {\n        java.log(`获取用户搜索小说结束`)\n    })\n    return novels\n}\n\nfunction getSeries(seriesName){\n    const MAXPAGES = 3\n    let novelList = []\n    java.log(util.urlSearchSeries(seriesName,1))\n    let resp = util.getAjaxJson(util.urlSearchSeries(seriesName,1))\n    novelList = novelList.concat(resp.body.novel.data)\n    for (let i=Number(java.get(\"page\"))+1 ; i<resp.body.novel.lastPage, i<MAXPAGES; i++) {\n        java.log(`页面：${i}`)\n        novelList = novelList.concat(util.getAjaxJson(util.urlSearchSeries(seriesName, i)).body.novel.data)\n    }\n    return novelList\n}\n\n(() => {\n    let novelsList = []\n    novelsList = novelsList.concat(JSON.parse(result).body.novel.data)\n    // novelsList = novelsList.concat(getSeries(String(java.get(\"key\"))))\n    // novelsList = novelsList.concat(getUserNovels(String(java.get(\"key\"))))\n    return util.formatNovels(handNovels(util.combineNovels(novelsList)))\n})();",
            "bookUrl": "detailedUrl",
            "checkKeyWord": "测试页面",
            "coverUrl": "coverUrl",
            "intro": "description",
            "kind": "tags",
            "lastChapter": "latestChapter",
            "name": "title",
            "wordCount": "textCount"
        },
        "ruleToc": {
            "chapterList": "@js:\nvar util = objParse(String(java.get(\"util\")))\n\nfunction objParse(obj) {\n    return JSON.parse(obj, (n, v) => {\n        if (typeof v == \"string\" && v.match(\"()\")) {\n            return eval(`(${v})`)\n        }\n        return v;\n    })\n}\n\nfunction oneShotHandler(res) {\n    return [{\n        title: res.title,\n        chapterUrl: util.urlNovel(res.id),\n        updateDate: util.timeTextFormat(res.createDate)\n    }]\n}\n\nfunction seriesHandler(res) {\n    const limit = 30\n    let returnList = [];\n    let seriesID = res.seriesNavData.seriesId\n    let allChaptersCount = (() => {\n        let result = util.getAjaxJson(util.urlSeriesDetailed(seriesID)).body.total\n        util.debugFunc(() => {\n            java.log(`本目录一共有:${result} 章节`);\n        })\n        return result;\n    })();\n\n    //发送请求获得相应数量的目录列表\n    function sendAjaxForGetChapters(lastIndex) {\n        res = util.getAjaxJson(util.urlSeriesNovels(seriesID, limit, lastIndex)).body.thumbnails.novel\n        res.forEach(v => {\n            v.title = v.title.replace(`${v.seriesTitle}`, \"\").replace(RegExp(/（|）|-/g), \"\")\n            v.chapterUrl = util.urlNovel(v.id)\n            v.updateDate = util.timeTextFormat(v.createDate)\n            util.debugFunc(() => {\n                java.log(`${v.title}`)\n            })\n        })\n        return res;\n    }\n\n    //逻辑控制者 也就是使用上面定义的两个函数来做对应功能\n    //要爬取的总次数\n    let max = (allChaptersCount / limit) + 1\n    for (let i = 0; i < max; i++) {\n        //java.log(\"i的值:\"+i)\n        let list = sendAjaxForGetChapters(i * limit);\n        //取出每个值\n        returnList = returnList.concat(list)\n        // java.log(JSON.stringify(returnList))\n    }\n    return returnList\n}\n\n(() => {\n    // 获取网址id，请求并解析数据，调试用\n    var novelId = 0, res = \"\"\n    let isHtml = result.startsWith(\"<!DOCTYPE html>\")\n    if (isHtml) {\n        let isSeries = baseUrl.match(new RegExp(\"pixiv.net/(ajax/|)novel/series\"))\n        if (isSeries) {\n            let seriesId = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n            java.log(`系列ID：${seriesId}`)\n            novelId = util.getAjaxJson(util.urlSeriesDetailed(seriesId)).body.firstNovelId\n            java.log(`首篇小说ID：${novelId}`)\n            res = util.getAjaxJson(util.urlNovelDetailed(novelId)).body\n        } else {\n            let isNovel = baseUrl.match(new RegExp(\"pixiv.net/(ajax/|)novel\"))\n            if (isNovel) {\n                novelId = baseUrl.match(new RegExp(\"\\\\d+\"))[0]\n                java.log(`详情：匹配小说ID：${novelId}`)\n                res = util.getAjaxJson(util.urlNovelDetailed(novelId)).body\n            } else {\n                return []\n            }\n        }\n    } else {\n        res = JSON.parse(result).body\n        if (res.total === 0) {\n            return []\n        }\n    }\n\n    if (res.seriesNavData === null || res.seriesNavData === undefined) {\n        return oneShotHandler(res)\n    }\n    return seriesHandler(res)\n})()",
            "chapterName": "title",
            "chapterUrl": "chapterUrl",
            "updateTime": "updateDate"
        },
        "searchUrl": "@js:\njava.put(\"page\",page);java.put(\"key\",key);\n`https://www.pixiv.net/ajax/search/novels/${encodeURI(key)}?word=${encodeURI(key)}&order=date_d&mode=all&p=${page}&s_mode=s_tag&lang=zh`;",
        "variableComment": "",
        "weight": 0
    }
]